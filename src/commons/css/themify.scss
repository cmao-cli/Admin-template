/*
 * Implementation of themes
 */

 $_current-theme: null;

 @mixin themify($themes) {
  @each $theme, $map in $themes {

    $_current-theme: $theme !global;

    :global(.theme_#{$theme}) & {
      $theme-map: () !global;
      @each $key, $value in $map {
        // $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }

      @content;

      $theme-map: null !global;
    }
  }
}

@function themed($key) {
  @if ($_current-theme == null) {
    @error "themed() function should only be used into code that is wrapped by 'themify' mixin";
  }

  @if (not map-has-key(map-get($themes, $_current-theme), $key)) {
    @warn "Unknown theme key '#{$key}' for theme '#{$_current-theme}'";
    @return null;
  }

  @return map-get($theme-map, $key);
}
